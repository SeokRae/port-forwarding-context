buildscript {
    ext {
        springBootVersion = '3.2.3'
        springDependencyManagementVersion = '1.1.4'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

bootJar {
    enabled = false
}

allprojects {
    repositories {
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.springframework.boot') {
                details.useVersion springBootVersion
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.example'
    version = '0.0.1-SNAPSHOT'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    // 각 서브프로젝트의 bootJar 태스크 활성화
    bootJar {
        enabled = true
    }
}

project(':filter-inbound-module') {
    // java-library 플러그인이 적용된 모듈은 subprojects 블록의 공통 설정을 상속받지 않습니다.
    apply plugin: 'java-library'
    dependencies {
        api 'org.springframework.boot:spring-boot-starter-web'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    }
}

project(':source-server') {

    dependencies {
        implementation project(':filter-inbound-module')
    }
}


project(':destination-a') {

    dependencies {
        implementation project(':filter-inbound-module')
    }
}

project(':destination-b') {

    dependencies {
    }
}

